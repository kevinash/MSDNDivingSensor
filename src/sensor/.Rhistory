library(ggplot2)
library (dplyr)
library(gridExtra)
ReadNewFormatFile <- function(df, debug_print = 0) {
##
## debug_print values: 0 - don't print, 1 - print totals, 2 - print all
##
first_comma_pos_next_line <- -1
pos <- -1
comma_cnt <- -1
full_line <- "" #
parsed_set_line_i <- data.frame(T =as.POSIXct(character()), V2 = character(0))
parsed_set <- data.frame(T =as.POSIXct(character()), V2 = character(0))
if (debug_print > 0) {print (paste("Total rows =", nrow(df) ))}
for(i in 1:nrow(df))
{
if (nchar(full_line) == 0) {
#initial setup
start <- 1
full_line <- df$V4[i]
parsed_set_line_i <- as.data.frame(rbind(c(df$V2[i], full_line)))
} else{
#count comma separators in full line
comma_cnt <- sum(unlist(strsplit(full_line,"")) == ",")
new_line_exists <- sum(unlist(strsplit(full_line,"")) == "\n")
if (new_line_exists > 0) {pos <- regexpr(pattern ='\n',full_line)[1]}
len_full_line <- nchar(full_line)
first_comma_pos_next_line <- regexpr(pattern =',',df$V4[i])[1]
# one line of data could be presented in one, 2 or 3 lines
# when received '\n' - process line, or when next line has time fraction field(length = 8)
if (
(new_line_exists > 0  && pos == len_full_line) |
(first_comma_pos_next_line == 8 && len_full_line > 10)
)
{
full_line <- gsub("\n", "", full_line)
if (nchar(full_line)> 0) {
parsed_set_line_i$V2 <- full_line                 #update full combined string
parsed_set <- rbind(parsed_set,parsed_set_line_i) #save into resulting dataset
#parse only full lines with 7 commas & 8 numbers - got all the columns
if (comma_cnt==7) {
s <- strsplit(full_line, ",")
xx <- unique(unlist(s)[grepl('[A-Z]', unlist(s))])
sap <- t(sapply(seq(s), function(i){
wh <- which(!xx %in% s[[i]]); n <- suppressWarnings(as.numeric(s[[i]]))
nn <- n[!is.na(n)]; if(length(wh)){ append(nn, NA, wh-1) } else { nn }
}))
dt <- data.frame(parsed_set_line_i,sap)
if (ncol(dt)==10) {
#save data only when all columns are present, ignore lines with missing fields
if (exists('dt_result') && is.data.frame(get('dt_result'))) {
dt_result <-rbind(dt_result,dt) # need plyr to fill out missing values with NA
}
else{
dt_result <- dt
}
}
}
if (debug_print==2 & (exists('dt_result') && is.data.frame(get('dt_result')))) {
print(paste("SAVED: i=",i,"start=",start," full_line=",full_line,
" rows=",nrow(parsed_set)," parsed rows=",nrow(dt_result)))}
}
#reset values
comma_cnt <- 0
start <- 1
pos <- -1
full_line <- gsub(" ", "", df$V4[i])
parsed_set_line_i <- as.data.frame(rbind(c(df$V2[i], full_line)))   #save next row in temp dataframe
} else{
#get next chunk, append and remove extra spaces
full_line <- gsub(" ", "", paste(full_line, df$V4[i], sep=""))
start <- start + 1
}
}
}
col_names <- c('t','line_to_parse',"t_fraction",'wx', 'wy', 'wz', 'ax', 'ay', 'az', 'o')
colnames(dt_result) <- col_names            #rename columns
if (debug_print>0) {print (paste("Rows read =", nrow(df), ", processed =", nrow(parsed_set),
", parsed =", nrow(dt_result)))}
return(dt_result)
}
PlotSingleChart <- function(gf,chart_title, mainColor, fileName, sidetext,newPlot=FALSE){
if (newPlot) {
plot(1:length(gf),gf,type="l",ylab="",xlab="",col=mainColor, lwd = 2 )
abline(h = 0, v = 500 * c(1:9), lty = 2, lwd = .2, col = "gray70")
}else{
lines(1:length(gf),gf,type="l",col=mainColor,lwd=2)
}
if (chart_title !="") {title(paste(chart_title,":",fileName), cex.main = 1,   col.main= "blue")}
mtext(sidetext,side=4,col="blue",cex=1)
}
PlotInitialCharts <- function(df, fileName){
###############
#
# 4. Plot initial observations for Angular Velocity  & Accelleration
#
###############
par(mfcol = c(3,2),oma = c(2,2,0,0) + 0.1,mar = c(1, 1, 1, 1) + 0.5)
PlotSingleChart(df$wx,"Angular Velocity ","red", fileName,"Wx",TRUE)
PlotSingleChart(df$wy,"","green", fileName,"Wy",TRUE)
PlotSingleChart(df$wz,"","blue", fileName,"Wz",TRUE)
PlotSingleChart(df$ax,"Accelleration ","red", fileName,"Ax",TRUE)
PlotSingleChart(df$ay,"","green", fileName,"Ay",TRUE)
PlotSingleChart(df$az,"","blue", fileName,"Az",TRUE)
}
CalculateSpringBoardDivingValues <- function(sourceFile, debug_print = 0){
library(ggplot2)
library (dplyr)
library(gridExtra)
#SensorKit data
dat <- read.table(sourceFile, header = FALSE, skip=43,sep="\t",stringsAsFactors=FALSE)
dat2 <- dat[dat$V1=="A", ]                 #Get only A rows
dat2$V4 <- gsub(" received", "", dat2$V3)  #remove Received
df <- ReadNewFormatFile(dat2, debug_print = debug_print)
# 3.values conversion
#   wx, wy, wz *  0.001 * PI / 180.0 = radians/second (ang. Velocity)
#   ax, at, az = * 0.001 * 9.81 = m/s^2 (acceleration)
df$wx <- df$wx *  0.001 #ignore radians for now # * pi / 180.0
df$wy <- df$wy *  0.001 #ignore radians for now # * pi / 180.0
df$wz <- df$wz *  0.001 #ignore radians for now # * pi / 180.0
df$ax <- df$ax * 0.001 * 9.81
df$ay <- df$ay * 0.001 * 9.81
df$az <- df$az * 0.001 * 9.81
PlotInitialCharts (df, kitSensorFile)
#========================================
# Calculating Flex with Angular Velocity
#========================================
#
# Take only needed columns
# Use values [1:length(df)-1] as a Start
# and values [2:length(df)] as End point of interval to calculate time delta
#
dt <- "2018-07-23" # DateFromFile - date of the data taken
d<-data.frame("Start"=as.numeric(df$t_fraction[1:length(df$t_fraction)-1]), #index 1
"End"=as.numeric(df$t_fraction[2:length(df$t_fraction)]),     #index start + 1
"Wz"=df$wz[1:length(df$t_fraction)-1],
"StartTime" = as.POSIXct(strptime(paste(dt,df$t[1:length(df$t)-1]),"%Y-%m-%d %H:%M:%OS")),
"EndTime" = as.POSIXct(strptime(paste(dt,df$t[2:length(df$t)]),"%Y-%m-%d %H:%M:%OS")),
stringsAsFactors=FALSE)
revFirstMin <- which.min(rev(d$Wz))                 # first min from the end
posLastMin <- length(df$wz) - revFirstMin +1         # position of the first min from the end = take off point
posTakeOff <- posLastMin
meanWz <- mean(d$Wz) #SREDNEE ZNACHENUE
avgLinearDeviationWz <- mean(d$Wz - meanWz) #SREDNEE LINEINOE OTKLONENIE
threshold <- (min(d$Wz - meanWz) + max(d$Wz - meanWz))/10 # 10% from range of the LINEINOE OTKLONENIE
posStart <- which.max(abs(d$Wz - meanWz) > abs(threshold)) -2
# Calculate delta t by t_fraction
d$duration <-d$End -d$Start
d$theta <- d$Wz * d$duration * 0.001 # need delta time (duration) in seconds from milliseconds
# Cumulative values for the Angle
d$thetaCum <-0.                      #start with 0 for all Cumulative Values of Angle
d$thetaCum[posStart:posTakeOff] <- cumsum(d$theta[posStart:posTakeOff])
par(mfcol = c(3,1),oma = c(2,2,0,0) + 0.1,mar = c(1,1,1,1) + 0.5)
PlotSingleChart(df$wz,"Gyro Z coordinate ","cyan4", kitSensorFile,"Wz",TRUE)
abline(h = meanWz, lty = 2, lwd = .2, col = "blue")
abline(h = meanWz+threshold, lty = 2, lwd = .2, col = "red")
abline(h = meanWz-threshold, lty = 2, lwd = .2, col = "red")
PlotSingleChart(d$Wz[posStart:posTakeOff],"Subset from hurdle landing to takeoff","cyan4", kitSensorFile,"Omega z",TRUE)
PlotSingleChart(d$thetaCum[posStart:posTakeOff],"Flex Angle (deg.) ","cyan4", kitSensorFile,"Theta",TRUE)
writeLines (paste (
"Index of Hurdle landing time (Start)                = ", posStart,"\n",
"Index of Take Off time       (End)                  = ", posTakeOff,"\n",
"Maximum downward flexion of the board               = ", abs(min(d$thetaCum))," deg.","\n",
"Take Off time                                       = ",d$StartTime[posTakeOff], "\n",
"Hurdle landing time                                 = ",d$StartTime[posStart], "\n",
"Board contact time (from hurdle landing to takeoff) = ",
round(difftime(d$StartTime[posTakeOff],d$StartTime[posStart]),digits = 4)," secs", sep="" ))
}
#### Diving Board immitation ####
kitSensorDir <- "../data/"#"C:/test/SensorKit/Data/"
kitSensorFile <- "Log_2018-07-23_14_34_54_static_3_bounce.txt"#"Log_20180521_125516_dribble_run_37_medium.txt"#"2018-01-14_13_40_31_CM_16Carve.txt"
sourceFile <- paste(kitSensorDir, kitSensorFile, sep="")
CalculateSpringBoardDivingValues (sourceFile,0)
CalculateSpringBoardDivingValues <- function(sourceFile, debug_print = 0){
library(ggplot2)
library (dplyr)
#SensorKit data
dat <- read.table(sourceFile, header = FALSE, skip=43,sep="\t",stringsAsFactors=FALSE)
dat2 <- dat[dat$V1=="A", ]                 #Get only A rows
dat2$V4 <- gsub(" received", "", dat2$V3)  #remove Received
df <- ReadNewFormatFile(dat2, debug_print = debug_print)
# 3.values conversion
#   wx, wy, wz *  0.001 * PI / 180.0 = radians/second (ang. Velocity)
#   ax, at, az = * 0.001 * 9.81 = m/s^2 (acceleration)
df$wx <- df$wx *  0.001 #ignore radians for now # * pi / 180.0
df$wy <- df$wy *  0.001 #ignore radians for now # * pi / 180.0
df$wz <- df$wz *  0.001 #ignore radians for now # * pi / 180.0
df$ax <- df$ax * 0.001 * 9.81
df$ay <- df$ay * 0.001 * 9.81
df$az <- df$az * 0.001 * 9.81
PlotInitialCharts (df, kitSensorFile)
#========================================
# Calculating Flex with Angular Velocity
#========================================
#
# Take only needed columns
# Use values [1:length(df)-1] as a Start
# and values [2:length(df)] as End point of interval to calculate time delta
#
dt <- "2018-07-23" # DateFromFile - date of the data taken
d<-data.frame("Start"=as.numeric(df$t_fraction[1:length(df$t_fraction)-1]), #index 1
"End"=as.numeric(df$t_fraction[2:length(df$t_fraction)]),     #index start + 1
"Wz"=df$wz[1:length(df$t_fraction)-1],
"StartTime" = as.POSIXct(strptime(paste(dt,df$t[1:length(df$t)-1]),"%Y-%m-%d %H:%M:%OS")),
"EndTime" = as.POSIXct(strptime(paste(dt,df$t[2:length(df$t)]),"%Y-%m-%d %H:%M:%OS")),
stringsAsFactors=FALSE)
revFirstMin <- which.min(rev(d$Wz))                 # first min from the end
posLastMin <- length(df$wz) - revFirstMin +1         # position of the first min from the end = take off point
posTakeOff <- posLastMin
meanWz <- mean(d$Wz) #SREDNEE ZNACHENUE
avgLinearDeviationWz <- mean(d$Wz - meanWz) #SREDNEE LINEINOE OTKLONENIE
threshold <- (min(d$Wz - meanWz) + max(d$Wz - meanWz))/10 # 10% from range of the LINEINOE OTKLONENIE
posStart <- which.max(abs(d$Wz - meanWz) > abs(threshold)) -2
# Calculate delta t by t_fraction
d$duration <-d$End -d$Start
d$theta <- d$Wz * d$duration * 0.001 # need delta time (duration) in seconds from milliseconds
# Cumulative values for the Angle
d$thetaCum <-0.                      #start with 0 for all Cumulative Values of Angle
d$thetaCum[posStart:posTakeOff] <- cumsum(d$theta[posStart:posTakeOff])
par(mfcol = c(3,1),oma = c(2,2,0,0) + 0.1,mar = c(1,1,1,1) + 0.5)
PlotSingleChart(df$wz,"Gyro Z coordinate ","cyan4", kitSensorFile,"Wz",TRUE)
abline(h = meanWz, lty = 2, lwd = .2, col = "blue")
abline(h = meanWz+threshold, lty = 2, lwd = .2, col = "red")
abline(h = meanWz-threshold, lty = 2, lwd = .2, col = "red")
PlotSingleChart(d$Wz[posStart:posTakeOff],"Subset from hurdle landing to takeoff","cyan4", kitSensorFile,"Omega z",TRUE)
PlotSingleChart(d$thetaCum[posStart:posTakeOff],"Flex Angle (deg.) ","cyan4", kitSensorFile,"Theta",TRUE)
writeLines (paste (
"Index of Hurdle landing time (Start)                = ", posStart,"\n",
"Index of Take Off time       (End)                  = ", posTakeOff,"\n",
"Maximum downward flexion of the board               = ", abs(min(d$thetaCum))," deg.","\n",
"Take Off time                                       = ",d$StartTime[posTakeOff], "\n",
"Hurdle landing time                                 = ",d$StartTime[posStart], "\n",
"Board contact time (from hurdle landing to takeoff) = ",
round(difftime(d$StartTime[posTakeOff],d$StartTime[posStart]),digits = 4)," secs", sep="" ))
}
CalculateSpringBoardDivingValues (sourceFile,0)
kitSensorDir <- "C:/Users/kevinash/Source/Repos/MSDNDivingSensor/data/"#"C:/test/SensorKit/Data/"
kitSensorFile <- "Log_2018-07-23_14_34_54_static_3_bounce.txt"#"Log_20180521_125516_dribble_run_37_medium.txt"#"2018-01-14_13_40_31_CM_16Carve.txt"
sourceFile <- paste(kitSensorDir, kitSensorFile, sep="")
kitSensorDir <- "./../data/"#"C:/test/SensorKit/Data/"
kitSensorFile <- "Log_2018-07-23_14_34_54_static_3_bounce.txt"#"Log_20180521_125516_dribble_run_37_medium.txt"#"2018-01-14_13_40_31_CM_16Carve.txt"
sourceFile <- paste(kitSensorDir, kitSensorFile, sep="")
CalculateSpringBoardDivingValues (sourceFile,0)
kitSensorDir <- "./data/"#"C:/test/SensorKit/Data/"
kitSensorFile <- "Log_2018-07-23_14_34_54_static_3_bounce.txt"#"Log_20180521_125516_dribble_run_37_medium.txt"#"2018-01-14_13_40_31_CM_16Carve.txt"
sourceFile <- paste(kitSensorDir, kitSensorFile, sep="")
CalculateSpringBoardDivingValues (sourceFile,0)
